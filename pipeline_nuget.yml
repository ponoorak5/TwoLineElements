parameters:
- name: push_nuget
  type: boolean
  default: false

stages:
- stage: Build_and_Test
  variables:    
  - template: ./pipeline_variables.yml
  jobs:
  - job: Build_and_Test
    steps:
    - checkout: self
    - bash: |
        echo "Version: $(build_version)"
        echo "is_master: $(is_master)"
        echo "push_nuget: ${{ parameters.push_nuget }}"
      name: Build_Version
      
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: 6.0.x
    - task: NuGetToolInstaller@1
    
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DotNetCoreCLI@2 
      displayName: 'Build Solution' 
      inputs: 
        projects: '$(solution)' 
        arguments: '--configuration $(buildConfiguration) --output $(Build.artifactStagingDirectory) /p:Version=$(build_version)' 
        versioningScheme: byBuildNumber

    - task: DotNetCoreCLI@2
      displayName: 'Running Tests'
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --collect:"Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects: '$(tests)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'TwoLineElements'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.artifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
        
    - task: DotNetCoreCLI@2
      displayName: 'Pack' 
      inputs: 
        command: pack
        packagesToPack: '$(solution)' 
        nobuild: true 
        versioningScheme: byEnvVar 
        verbosityPack: 'Normal'
        versionEnvVar: build_version
        
    - task: DotNetCoreCLI@2 
      displayName: 'Push Nuget' 
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'Nasa/Nasa_feed'
        
    - task: DotNetCoreCLI@2
      displayName: Push Nuget Package
      condition: and(succeeded(), and(eq(variables['is_master'], true), eq( '${{ parameters.push_nuget }}', true)))
      inputs:
        command: custom
        custom: nuget
        arguments: >
            push $(Agent.BuildDirectory)/$(ArtifactNugetName)/*.nupkg
            -s https://api.nuget.org/v3/index.json
            -k $(NuGetApiKey) 